generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String           @unique
  name            String?
  password        String? // Optional for OAuth users
  image           String?
  provider        String? // "credentials" or "google"
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  twitterAccounts TwitterAccount[] // Array of TwitterAccounts
  messages        Message[] // Array of Messages
  automatedLeads  AutomatedLead[] // Add this line
  userCredits     UserCredits? // Relation to UserCredits
}

model TwitterAccount {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  cookies            Json[] // Array of cookie objects
  createdAt          DateTime @default(now())
  twitterAccountName String
  userId             String   @db.ObjectId // Required reference to User
  user               User     @relation(fields: [userId], references: [id]) // Required relation to User
}

model Message {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  messageSent  String // The text of the message that was sent
  campaignName String? // Optional campaign name
  messages     MessageItem[] // Array of message items with recipient and status
  status       String        @default("In Progress")
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
}

// Embedded document for message items
type MessageItem {
  recipientId String // Twitter recipient ID
  status      Boolean // Message delivery status
}

model AutomatedLead {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  leadName   String
  followers  Json[] // Array of follower objects
  totalLeads Int
  createdAt  DateTime @default(now())
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
}

model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  profileUrl String   @unique
  followers  Json[]
  createdAt  DateTime @default(now())
}

// New model for user credits
model UserCredits {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  leadCredits    Int      @default(0)
  dmCredits      Int      @default(0) // Monthly DM credits
  planType       String? // "Mini", "Starter", or "Pro"
  planId         String? // Lemon Squeezy plan ID
  orderId        String? // Lemon Squeezy order ID
  subscriptionId String? // Lemon Squeezy subscription ID
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
